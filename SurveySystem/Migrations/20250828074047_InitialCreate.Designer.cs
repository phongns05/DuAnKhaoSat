// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveySystem.Models;

#nullable disable

namespace SurveySystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828074047_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SurveySystem.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int")
                        .HasColumnName("AttemptID");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("OptionID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("AnswerId")
                        .HasName("PK__Answers__D4825024DE14EFA4");

                    b.HasIndex("AttemptId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("SurveySystem.Models.Assignment", b =>
                {
                    b.Property<int>("AssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AssignID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignId"));

                    b.Property<DateTime?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DeptID");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AssignId")
                        .HasName("PK__Assignme__9FFF4C4FBF0F7345");

                    b.HasIndex("DeptId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("SurveySystem.Models.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Detail")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LogId")
                        .HasName("PK__AuditLog__5E5499A8BA5A7E50");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SurveySystem.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DeptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeptId"));

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DeptId")
                        .HasName("PK__Departme__0148818E86F5A0F2");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SurveySystem.Models.Difficulty", b =>
                {
                    b.Property<int>("DifficultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DifficultyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DifficultyId"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DifficultyId")
                        .HasName("PK__Difficul__161A3207E72C7F7C");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("SurveySystem.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FeedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF610327BB5");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SurveySystem.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DifficultyId")
                        .HasColumnType("int")
                        .HasColumnName("DifficultyID");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("SkillID");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06F8CBDCA760C");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("SkillId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SurveySystem.Models.QuestionOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("IsCorrect")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.HasKey("OptionId")
                        .HasName("PK__Question__92C7A1DF56F892BD");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("SurveySystem.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3AF3E04112");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SurveySystem.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SkillID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SkillId")
                        .HasName("PK__Skills__DFA091E7B87D4C98");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SurveySystem.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("PassScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TestId")
                        .HasName("PK__Tests__8CC331006920B4C5");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("SurveySystem.Models.TestAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttemptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("InProgress");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AttemptId")
                        .HasName("PK__TestAtte__891A6886F7ECE363");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestAttempts");
                });

            modelBuilder.Entity("SurveySystem.Models.TestQuestion", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("TestId", "QuestionId")
                        .HasName("PK__TestQues__5C1F37F89885D575");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("SurveySystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC1A5E218D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105348D0D91F8")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserDepartment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DeptID");

                    b.HasKey("UserId", "DeptId")
                        .HasName("PK__User_Dep__E79C44B4397E049A");

                    b.HasIndex("DeptId");

                    b.ToTable("User_Department", (string)null);
                });

            modelBuilder.Entity("SurveySystem.Models.Answer", b =>
                {
                    b.HasOne("SurveySystem.Models.TestAttempt", "Attempt")
                        .WithMany("Answers")
                        .HasForeignKey("AttemptId")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Attempt");

                    b.HasOne("SurveySystem.Models.QuestionOption", "Option")
                        .WithMany("Answers")
                        .HasForeignKey("OptionId")
                        .HasConstraintName("FK_Answers_Options");

                    b.HasOne("SurveySystem.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Questions");

                    b.Navigation("Attempt");

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveySystem.Models.Assignment", b =>
                {
                    b.HasOne("SurveySystem.Models.Department", "Dept")
                        .WithMany("Assignments")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK_Assign_Dept");

                    b.HasOne("SurveySystem.Models.Test", "Test")
                        .WithMany("Assignments")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_Assign_Tests");

                    b.HasOne("SurveySystem.Models.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Assign_Users");

                    b.Navigation("Dept");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveySystem.Models.AuditLog", b =>
                {
                    b.HasOne("SurveySystem.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Logs_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveySystem.Models.Feedback", b =>
                {
                    b.HasOne("SurveySystem.Models.Test", "Test")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Tests");

                    b.HasOne("SurveySystem.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedbacks_Users");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveySystem.Models.Question", b =>
                {
                    b.HasOne("SurveySystem.Models.User", "CreatedByNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Questions_Users");

                    b.HasOne("SurveySystem.Models.Difficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .HasConstraintName("FK_Questions_Difficulties");

                    b.HasOne("SurveySystem.Models.Skill", "Skill")
                        .WithMany("Questions")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK_Questions_Skills");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Difficulty");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SurveySystem.Models.QuestionOption", b =>
                {
                    b.HasOne("SurveySystem.Models.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QOptions_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveySystem.Models.Test", b =>
                {
                    b.HasOne("SurveySystem.Models.User", "CreatedByNavigation")
                        .WithMany("Tests")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Tests_Users");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("SurveySystem.Models.TestAttempt", b =>
                {
                    b.HasOne("SurveySystem.Models.Test", "Test")
                        .WithMany("TestAttempts")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TAttempts_Tests");

                    b.HasOne("SurveySystem.Models.User", "User")
                        .WithMany("TestAttempts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_TAttempts_Users");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveySystem.Models.TestQuestion", b =>
                {
                    b.HasOne("SurveySystem.Models.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_TQ_Questions");

                    b.HasOne("SurveySystem.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TQ_Tests");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SurveySystem.Models.User", b =>
                {
                    b.HasOne("SurveySystem.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UserDepartment", b =>
                {
                    b.HasOne("SurveySystem.Models.Department", null)
                        .WithMany()
                        .HasForeignKey("DeptId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDept_Dept");

                    b.HasOne("SurveySystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDept_User");
                });

            modelBuilder.Entity("SurveySystem.Models.Department", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("SurveySystem.Models.Difficulty", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveySystem.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionOptions");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("SurveySystem.Models.QuestionOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveySystem.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SurveySystem.Models.Skill", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveySystem.Models.Test", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Feedbacks");

                    b.Navigation("TestAttempts");

                    b.Navigation("TestQuestions");
                });

            modelBuilder.Entity("SurveySystem.Models.TestAttempt", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveySystem.Models.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("AuditLogs");

                    b.Navigation("Feedbacks");

                    b.Navigation("Questions");

                    b.Navigation("TestAttempts");

                    b.Navigation("Tests");
                });
#pragma warning restore 612, 618
        }
    }
}
